# Most of this code was generated by GitHub Copilot
# The code is a simulation of a virtual peripheral device using Pygame.

# Required Libraries:
import pygame
import struct
import os
import time
import sys

WIDTH, HEIGHT = 480, 320
KNOB_CHANGE = 5
FPS = 60

MEM_DIR = "memory"
SCREEN_OUT = os.path.join(MEM_DIR, "screen.out")
LEDS_OUT = os.path.join(MEM_DIR, "leds.out")
KNOBS_IN = os.path.join(MEM_DIR, "knobs.in")
KNOB_PRESSES_IN = os.path.join(MEM_DIR, "knob_presses.in")

ENDIANITY = "BIG" if sys.byteorder == "big" else "LITTLE"

def is_big_endian():
    return ENDIANITY.upper() == "BIG"

def read_u16(data, offset=0):
    return struct.unpack_from(">H" if is_big_endian() else "<H", data, offset)[0]

def read_u32(data, offset=0):
    while True:
        try:
            return struct.unpack_from(">I" if is_big_endian() else "<I", data, offset)[0]
        except struct.error:
            print("Error reading 32-bit unsigned integer. Retrying...")
            time.sleep(0.1)

def write_u32(value):
    return struct.pack(">I" if is_big_endian() else "<I", value)

def write_rgb888(r, g, b):
    return bytes([r, g, b]) if is_big_endian() else bytes([b, g, r])

def read_rgb888(data):
    if is_big_endian():
        return list(data[:3])
    else:
        return list(reversed(data[:3]))

def rgb565_to_rgb888(val):
    r = ((val >> 11) & 0x1F) << 3
    g = ((val >> 5) & 0x3F) << 2
    b = (val & 0x1F) << 3
    return r, g, b

class VirtualPeripherals:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((WIDTH + 200, HEIGHT + 50))
        pygame.display.set_caption("Virtual Peripherals")
        self.clock = pygame.time.Clock()

        self.knob_presses = [0, 0, 0]
        self.knobs = [0, 0, 0]  # RGB knob values (0-255)
        self.dragging_knob = None

        self.last_mouse_y = 0
        self.font = pygame.font.SysFont("Arial", 16)

        self.last_key_update_time = 0
        self.key_update_interval = 0
        self.load_knobs()

    def draw_lcd(self, surface):
        try:
            with open(SCREEN_OUT, "rb") as f:
                raw = f.read()
                for y in range(HEIGHT):
                    for x in range(WIDTH):
                        idx = 2 * (y * WIDTH + x)
                        if idx + 1 < len(raw):
                            val = read_u16(raw, idx)
                            surface.set_at((x, y), rgb565_to_rgb888(val))
        except FileNotFoundError:
            pass

    def draw_leds(self):
        try:
            try:
                with open(LEDS_OUT, "rb") as f:
                    raw = f.read(4)
                    if len(raw) == 4:
                        val = read_u32(raw)
                        self.leds = [(val >> i) & 1 for i in range(32)]
            except (OSError, struct.error):
                print("Error reading LEDs file. Starting with default values.")
        except FileNotFoundError:
            print("leds.out file not found. Starting with default values.")

        for i, on in enumerate(self.leds):
            color = (255, 165, 0) if on else (0, 0, 0)
            pygame.draw.circle(self.screen, color, (500 + (i % 8) * 20, 20 + (i // 8) * 30), 8)

    def load_knobs(self):
        try:
            with open(KNOBS_IN, "rb") as f:
                raw = f.read(3)
                if len(raw) == 3:
                    self.knobs = read_rgb888(raw)
                    print(f"Loaded knobs from file: R={self.knobs[0]} G={self.knobs[1]} B={self.knobs[2]}")
        except FileNotFoundError:
            print("knobs.in file not found. Starting with default values.")

    def draw_knobs(self):
        for i, (val, pressed) in enumerate(zip(self.knobs, self.knob_presses)):
            x, y = 520, 160 + i * 70
            radius = 30
            pygame.draw.circle(self.screen, (100, 100, 100), (x, y), radius)

            angle = (val / 255.0) * 360
            end_x = x + int(radius * 0.8 * pygame.math.Vector2(1, 0).rotate(-angle).x)
            end_y = y + int(radius * 0.8 * pygame.math.Vector2(1, 0).rotate(-angle).y)
            pygame.draw.line(self.screen, (255, 255, 255), (x, y), (end_x, end_y), 4)

            if pressed:
                pygame.draw.circle(self.screen, (255, 255, 255), (x, y), radius, 2)

            # clear previous text
            label_x, label_y = x + 40, y - 10
            pygame.draw.rect(self.screen, (0, 0, 0), (label_x, label_y, 140, 20))

            # draw current text
            text = self.font.render(f"{['R','G','B'][i]}: {val:3d} (0x{val:02X})", True, (255, 255, 255))
            self.screen.blit(text, (label_x, label_y))


    def save_knob_presses(self):
        with open(KNOB_PRESSES_IN, "wb") as f:
            if is_big_endian():
                val = (self.knob_presses[0] << 2) | (self.knob_presses[1] << 1) | self.knob_presses[2]
            else:
                val = (self.knob_presses[2] << 2) | (self.knob_presses[1] << 1) | self.knob_presses[0]
            f.write(write_u32(val))

    def save_knobs(self):
        with open(KNOBS_IN, "wb") as f:
            if is_big_endian():
                f.write(write_rgb888(*self.knobs))
            else:
                f.write(bytes(reversed(write_rgb888(*self.knobs))))

    def handle_click(self, event):
        if event.button != 1:  # only left mouse button
            return
        for i in range(3):
            x, y = 520, 160 + i * 70
            if pygame.math.Vector2(event.pos).distance_to((x, y)) <= 30:
                self.knob_presses[i] ^= 1
                print(f"Toggled knob press {['R', 'G', 'B'][i]} to {self.knob_presses[i]}")
                break

    def handle_keyboard_knobs(self):
        now = time.time()
        if now - self.last_key_update_time < self.key_update_interval:
            return

        keys = pygame.key.get_pressed()
        updated = False

        keymap = {
            pygame.K_q: (0, KNOB_CHANGE),
            pygame.K_a: (0, -KNOB_CHANGE),
            pygame.K_w: (1, KNOB_CHANGE),
            pygame.K_s: (1, -KNOB_CHANGE),
            pygame.K_e: (2, KNOB_CHANGE),
            pygame.K_d: (2, -KNOB_CHANGE),
        }

        for key, (index, delta) in keymap.items():
            if keys[key]:
                self.knobs[index] = (self.knobs[index] + delta) % 256
                print(f"Knob {['R', 'G', 'B'][index]} updated to {self.knobs[index]}")
                updated = True

        if updated:
            self.last_key_update_time = now

    def run(self):
        while True:
            self.clock.tick(FPS)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    self.handle_click(event)

            self.handle_keyboard_knobs()   # 1. Update from keys
            self.draw_lcd(self.screen)     # 2. Draw screen
            self.draw_leds()               # 3. Draw LEDs
            self.draw_knobs()              # 4. Draw knobs with updated values
            self.save_knob_presses()       # 5. Save press state
            self.save_knobs()              # 6. Save knob values to file

            pygame.display.flip()

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1].upper() in ["BIG", "LITTLE"]:
        ENDIANITY = sys.argv[1].upper()
    VirtualPeripherals().run()